// controllers/authController.js
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { User } from '../models/user.js';

// Registro de usu√°rio
export const register = async (req, res) => {
    try {
        const { name, email, password } = req.body;

        // Verifica se o usu√°rio j√° existe
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) return res.status(400).json({ message: 'E-mail j√° cadastrado' });

        // Hash da senha
        const hashedPassword = await bcrypt.hash(password, 10);

        // Criar novo usu√°rio
        const newUser = await User.create({ name, email, password: hashedPassword });

        res.status(201).json({ message: 'Usu√°rio cadastrado com sucesso', userId: newUser.id });
    } catch (error) {
        res.status(500).json({ message: 'Erro ao registrar usu√°rio', error });
    }
};

export const listarUsuarios = async (req, res) => {
    try {
        const usuarios = await User.findAll({ attributes: ['id', 'name', 'email'] }); // Evita retornar senhas
        res.json(usuarios);
    } catch (error) {
        res.status(500).json({ message: 'Erro ao buscar usu√°rios', error });
    }
};

// Atualiza√ß√£o de usu√°rio
export const atualizarUsuario = async (req, res) => {
    const { id } = req.params;  // Pega o ID do usu√°rio que ser√° atualizado
    const { name, email, password } = req.body;  // Dados que ser√£o atualizados

    try {
        // Verifica se o usu√°rio existe
        const user = await User.findOne({ where: { id } });
        if (!user) {
            return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
        }

        // Verifica se o email j√° est√° em uso por outro usu√°rio
        if (email && email !== user.email) {
            const existingEmail = await User.findOne({ where: { email } });
            if (existingEmail) {
                return res.status(400).json({ message: 'E-mail j√° cadastrado' });
            }
        }

        // Atualiza os dados do usu√°rio
        if (name) user.name = name;
        if (email) user.email = email;
        if (password) {
            const hashedPassword = await bcrypt.hash(password, 10);
            user.password = hashedPassword;
        }

        await user.save();  // Salva as altera√ß√µes no banco de dados

        res.status(200).json({ message: 'Usu√°rio atualizado com sucesso' });
    } catch (error) {
        res.status(500).json({ message: 'Erro ao atualizar usu√°rio', error });
    }
};

export const deletarUsuario = async (req, res) => {
    const { id } = req.params;

    console.log('üîé Tentativa de excluir usu√°rio ID:', id, 'por usu√°rio autenticado ID:', req.userId); // üõ† Depura√ß√£o

    try {
        const user = await User.findOne({ where: { id } });
        if (!user) {
            console.log('üö´ Usu√°rio n√£o encontrado!');
            return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
        }

        // üî• Verifica se o usu√°rio tem permiss√£o
        if (req.userId !== 1) {
            console.log('‚õî Permiss√£o negada! O usu√°rio autenticado n√£o √© administrador.');
            return res.status(403).json({ message: 'Permiss√£o negada' });
        }

        await user.destroy();
        console.log('‚úÖ Usu√°rio ID', id, 'deletado com sucesso!');
        res.status(200).json({ message: 'Usu√°rio deletado com sucesso' });
    } catch (error) {
        console.error('‚ùå Erro ao deletar usu√°rio:', error);
        res.status(500).json({ message: 'Erro ao deletar usu√°rio', error });
    }
};


export const forgotPassword = async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(200).json({ message: 'Se o e-mail existir, enviaremos instru√ß√µes para redefinir a senha.' });
    }

    const resetToken = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '15m' });

    // Enviar o token por e-mail (pode usar o Nodemailer aqui)
    console.log(`Token de redefini√ß√£o para ${email}: ${resetToken}`);

    res.status(200).json({ 
      message: 'Instru√ß√µes de redefini√ß√£o enviadas para o e-mail.', 
      token: resetToken // ‚úÖ Agora retorna o token corretamente!
    });
  } catch (error) {
    console.error('Erro ao processar solicita√ß√£o de redefini√ß√£o:', error);
    res.status(500).json({ message: 'Erro ao processar solicita√ß√£o de redefini√ß√£o de senha', error });
  }
};


export const resetPassword = async (req, res) => {
  const { token, newPassword } = req.body;

  console.log('Token recebido:', token);

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('Token decodificado:', decoded);

    const user = await User.findOne({ where: { id: decoded.id } });
    if (!user) {
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.status(200).json({ message: 'Senha atualizada com sucesso' });
  } catch (error) {
    console.error('Erro ao redefinir senha:', error);
    res.status(500).json({ message: 'Erro ao atualizar a senha', error });
  }
};







// Login de usu√°rio
export const login = async (req, res) => {
    console.log(' RECEBEU LOGIN:', req.body);  // ‚Üê Coloque aqui
    try {
        const { email, password } = req.body;

        // Verifica se o usu√°rio existe
        const user = await User.findOne({ where: { email } });
        if (!user) return res.status(400).json({ message: 'Usu√°rio n√£o encontrado' });

        // Verifica a senha
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) return res.status(400).json({ message: 'Senha incorreta' });

        // Gerar Token JWT
        const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '2h' });
        console.log('‚úÖ Token gerado:', token);

        res.json({ message: 'Login bem-sucedido', token });
    } catch (error) {
        res.status(500).json({ message: 'Erro ao fazer login', error });
    }
};

export const verifyToken = (req, res, next) => {
    let token = req.headers['authorization']; // ‚úÖ Pegando do cabe√ßalho da requisi√ß√£o

    console.log('üî• Token recebido na API:', token);  // üõ† Depura√ß√£o

    if (!token) {
        console.log('üö´ Nenhum token foi enviado!');
        return res.status(401).json({ message: 'Acesso negado' });
    }

    // üî• Remove "Bearer " se ele estiver presente
    if (token.startsWith('Bearer ')) {
        token = token.slice(7).trim();
    }

    console.log('üîç Token processado:', token);  // üõ† Depura√ß√£o

    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
        if (err) {
            console.log('‚ö†Ô∏è Token inv√°lido!', err);
            return res.status(403).json({ message: 'Token inv√°lido' });
        }

        console.log('‚úÖ Usu√°rio autenticado com ID:', decoded.id);
        req.userId = decoded.id;
        next();
    });
};






